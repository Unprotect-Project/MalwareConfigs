{******************************************************************************}
{                                                                              }
{                                                                              }
{                   Author: DarkCoderSc (Jean-Pierre LESUEUR)                  }
{                   https://www.twitter.com/darkcodersc                        }
{                   https://www.unprotect.it/                                  }
{                   https://github.com/Unprotect-Project                       }
{                   https://github.com/darkcodersc                             }
{                   https://github.com/PhrozenIO                               }
{                   License: Apache License 2.0                                }
{                                                                              }
{                                                                              }
{******************************************************************************}

program Stub;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils,
  Winapi.Windows,
  uExceptions in '..\..\..\Shared\Delphi\uExceptions.pas',
  uPayload in '..\..\..\Shared\Delphi\uPayload.pas',
  uSharedFunctions in '..\..\..\Shared\Delphi\uSharedFunctions.pas';

const RES_NAME = 'MALZCONF';

var AConfig        : TMalwareConfig;
    hResourceBlock : THandle;
    hResource      : THandle;
    pData          : Pointer;
    pDataSize      : DWORD;

begin
  try
    WriteLn('Read Malware Configuration from resources...');

    // https://learn.microsoft.com/fr-fr/windows/win32/api/libloaderapi/nf-libloaderapi-findresourcew?WT_mc_id=SEC-MVP-5005282
    hResourceBlock := FindResourceW(0, RES_NAME, RT_RCDATA);
    if hResourceBlock = 0 then
      raise EWindowsException.Create('FindResourceW');

    // https://learn.microsoft.com/fr-fr/windows/win32/api/libloaderapi/nf-libloaderapi-loadresource?WT_mc_id=SEC-MVP-5005282
    hResource := LoadResource(0, hResourceBlock);
    if hResource = 0 then
      raise EWindowsException.Create('LoadResource');

    // https://learn.microsoft.com/fr-fr/windows/win32/api/libloaderapi/nf-libloaderapi-lockresource?WT_mc_id=SEC-MVP-5005282
    pData := LockResource(hResource);
    if not Assigned(pData) then
      raise EWindowsException.Create('LockResource');

    // https://learn.microsoft.com/fr-fr/windows/win32/api/libloaderapi/nf-libloaderapi-sizeofresource?WT_mc_id=SEC-MVP-5005282
    pDataSize := SizeOfResource(0, hResourceBlock);
    if pDataSize = 0 then
      raise EWindowsException.Create('SizeOfResource');

    WriteLn(Format('Reading resource offset:`0x%p`, size: `%d`bytes', [
      pData,
      pDataSize
    ]));

    CopyMemory(@AConfig, pData, pDataSize);

    DumpMalwareConfig(AConfig);
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.
